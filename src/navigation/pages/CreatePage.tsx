import React, { useState } from 'react';
import { ScrollView, StyleSheet, Text, View, TextInput, TouchableOpacity, SafeAreaView, Button} from 'react-native';
import DateTimePicker from '@react-native-community/datetimepicker';
import { db } from '../../config/firebase';
import {push, ref, set} from 'firebase/database';
import * as ImagePicker from 'expo-image-picker';
import { getAuth } from 'firebase/auth';


const COLORS = {
  primary: '#000000',
  secondary: '#7d12ff',
  tertiary: '#ab20fd',
  accent: '#200589',
  background: '#fbf8fd',
};

const TextInputBox = ({ placeholder, onChangeText }) => {
  const [text, setText] = useState('');

  const handleChangeText = (newText) => {
    setText(newText);
    onChangeText(newText);
  };

  return (
    <TextInput
      style={styles.textInput}
      onChangeText={handleChangeText}
      value={text}
      placeholder={placeholder}
      placeholderTextColor="#a9a9a9"
    />
  );
};

const DateTimeSection = ({ label, dateValue, onDateChange, timeValue, onTimeChange }) => {
  return (
    <View style={styles.dateTimeSection}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionHeaderText}>{label}</Text>
      </View>
      <View style={styles.dateTimeContainer}>
        <DateTimePicker
          value={dateValue || new Date()}
          mode="date"
          display="default"
          onChange={(event, selectedDate) => onDateChange(selectedDate)}
          style={styles.dateTimePicker}
        />
        <DateTimePicker
          value={timeValue || new Date()}
          mode="time"
          display="default"
          onChange={(event, selectedTime) => onTimeChange(selectedTime)}
          style={styles.dateTimePicker}
        />
      </View>
    </View>
  );
};

export default function CreatePage() {
  const [eventTitle, setEventTitle] = useState('');
  const [organization, setOrganization] = useState('');
  const [address, setAddress] = useState('');
  const [theme, setTheme] = useState('');
  const [entryFee, setEntryFee] = useState('');
  const [eventDescription, setEventDescription] = useState('');
  const [startDate, setStartDate] = useState(new Date());
  const [startTime, setStartTime] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [endTime, setEndTime] = useState(new Date());

  const isCreateButtonEnabled =
    eventTitle && organization && address && entryFee && eventDescription;
    
  const auth = getAuth();
  const user = auth.currentUser;
  
  const dataAddOn = () => {
    // Get a new reference to the 'Events' node
    const eventsRef = ref(db, 'Events');
  
    // Push a new child node with auto-generated ID
    const newEventRef = push(eventsRef);
  
    // Get the unique ID generated by push
    const eventId = newEventRef.key;
    const adminUID = user.uid;
    
    // Create the data object with the unique ID
    const eventData = {
      eventId: eventId,
      eventTitle: eventTitle,
      organization: organization,
      theme: theme, 
      address: address,
      entryFee: entryFee,
      eventDescription: eventDescription,
      startDate: startDate,
      startTime: startTime,
      endDate: endDate,
      endTime: endTime,
      admin: adminUID
    };
    // Set the data to the unique ID
    set(newEventRef, eventData);
    console.log("Event has been created with ID:", eventId);
  }


  const [image, setImage] = useState(null);
  const [defaultImage, setDefaultImage] = useState(require('../../Images/tke.jpeg'));
  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
      // Set the default image to the selected image
      setDefaultImage({ uri: result.assets[0].uri });
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.titleContainer}>
          <Text style={styles.titleText}>Create</Text>
      </View>
      <ScrollView style={styles.pageContainer}>
        <View style={styles.inputBoxesContainer}>
          <TextInputBox
            placeholder="Event Title"
            onChangeText={setEventTitle}
          />
          <TextInputBox
            placeholder="Organization"
            onChangeText={setOrganization}
          />
          <TextInputBox
            placeholder="Address"
            onChangeText={setAddress}
          />
          <TextInputBox
            placeholder="Theme"
            onChangeText={setTheme}
          />
          <TextInputBox
            placeholder="Entry Fee"
            onChangeText={setEntryFee}
          />
          <TextInput
            style={styles.largeInputBox}
            placeholder="Event Description"
            multiline
            onChangeText={setEventDescription}
            placeholderTextColor="#a9a9a9"
          />
          <DateTimeSection
            label="Start Date and Time"
            dateValue={startDate}
            onDateChange={(selectedDate) => setStartDate(selectedDate)}
            timeValue={startTime}
            onTimeChange={(selectedTime) => setStartTime(selectedTime)}
          />
          <DateTimeSection
            label="End Date and Time"
            dateValue={endDate}
            onDateChange={(selectedDate) => setEndDate(selectedDate)}
            timeValue={endTime}
            onTimeChange={(selectedTime) => setEndTime(selectedTime)}
          />
          <View style={styles.buttonContainer}>
            <TouchableOpacity
              style={styles.imagePickerButton}
              onPress={pickImage}
            >
              <Text style={styles.buttonText}>Edit Party Banner</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.imagePickerButton}
              onPress={pickImage}
            >
              <Text style={styles.buttonText}>Organization</Text>
            </TouchableOpacity>
          </View>
          <TouchableOpacity
            style={[
              styles.createButton,
              isCreateButtonEnabled ? {} : styles.disabledButton,
            ]}
            onPress={dataAddOn}
            disabled={!isCreateButtonEnabled}
          >
            <Text style={styles.buttonText}>Create my event</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#0A0A08', // Black
  },
  pageContainer: {
    flex: 1,
    backgroundColor: "#0A0A08",
  },
  titleContainer: {
    // margin: 10,
    // paddingTop: -10,
    paddingBottom: 10,
  },
  titleText: {
    color: COLORS.secondary,
    fontSize: 34,
    fontWeight: '600',
    textAlign: 'center',
  },
  inputBoxesContainer: {
    paddingHorizontal: 20,
  },
  textInput: {
    height: 50,
    backgroundColor: COLORS.background,
    marginBottom: 15,
    paddingHorizontal: 15,
    borderRadius: 25,
    fontSize: 16,
    elevation: 2,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  largeInputBox: {
    height: 100,
    textAlignVertical: 'top',
    paddingHorizontal: 15,
    borderRadius: 25,
    fontSize: 16,
    backgroundColor: COLORS.background,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    marginVertical: 10,
  },
  createButton: {
    backgroundColor: COLORS.secondary,
    paddingVertical: 12,
    borderRadius: 25,
    width: '100%',
    alignItems: 'center',
    marginTop: 20,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  disabledButton: {
    backgroundColor: "#bfbfbf",
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '500',
  },
  dateTimePickerContainer: {
    alignSelf: 'stretch',
    marginVertical: 10,
    paddingTop: 15,
    backgroundColor: COLORS.background,
    borderRadius: 10,
    borderWidth: 0.5,
    borderColor: COLORS.primary,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1,
  },
  dateTimePickerLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.primary,
  },
  dateTimePicker: {
    flex: 1,
    marginRight: 10,
  },
  dateTimeSection: {
    marginBottom: 20,
  },
  sectionHeader: {
    backgroundColor: COLORS.secondary,
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
  },
  sectionHeaderText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.background,
  },
  dateTimeContainer: {
    backgroundColor: COLORS.background,
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 3, // Adjust the spacing as needed
  },
  imagePickerButton: {
    backgroundColor: COLORS.accent,
    paddingVertical: 12,
    borderRadius: 25,
    width: '48%', // Adjust the width as needed
    alignItems: 'center',
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
});


